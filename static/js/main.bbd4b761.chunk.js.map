{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","wordList","setList","quantity","setQuantity","max","words","length","getIndexes","listOfIndexes","i","randomIndex","Math","floor","random","push","getWords","isSorted","indexes","list","map","index","sort","a","b","localeCompare","JSON","stringify","style","textAlign","width","htmlFor","name","type","value","onChange","e","target","min","onClick","color","maxWidth","border","padding","overflowWrap","margin","display","navigator","clipboard","writeText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAGe,SAASA,IAAO,IAAD,EACAC,qBADA,mBACrBC,EADqB,KACXC,EADW,OAEIF,mBAAS,IAFb,mBAErBG,EAFqB,KAEXC,EAFW,KAGtBC,EAAMC,EAAMC,OAEZC,EAAa,WAEjB,IADA,IAAMC,EAAgB,GACbC,EAAI,EAAGA,EAAIP,EAAUO,IAAK,CACjC,IAAMC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWT,GAC/CI,EAAcM,KAAKJ,GAErB,OAAOF,GAGHO,EAAW,WAAuB,IAAtBC,EAAqB,wDAC/BC,EAAUV,IACZW,EAAOD,EAAQE,KAAI,SAACC,GAAD,OAAWf,EAAMe,MAGxC,OAFIJ,IAAUE,EAAOA,EAAKG,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,OACzDtB,EAAQwB,KAAKC,UAAUR,IAChBA,GAGT,OACE,sBAAKS,MAAO,CAAEC,UAAW,SAAUC,MAAO,SAA1C,UACE,sEACA,uBAAOC,QAAQ,WAAf,yBACA,uBACEC,KAAK,WACLC,KAAK,SACLC,MAAO/B,EACPgC,SAAU,SAACC,GAAD,OAAOhC,EAAYgC,EAAEC,OAAOH,QACtCI,IAAI,IACJjC,IAAKA,IAEP,wBAAQkC,QAAS,kBAAMvB,KAAvB,sBACA,wBAAQuB,QAAS,kBAAMvB,GAAS,IAAhC,mCACCb,EAAWE,EACV,oBAAGuB,MAAO,CAAEY,MAAO,OAAnB,qCAAqDnC,EAArD,OAEA,sBAEDJ,EACC,sBACE2B,MAAO,CACLa,SAAU,OACVC,OAAQ,kBACRC,QAAS,OACTC,aAAc,aACdC,OAAQ,aANZ,UASE,wBACEjB,MAAO,CAAEkB,QAAS,SAClBP,QAASQ,UAAUC,UAAUC,UAAUhD,GAFzC,wBATF,iBAeiBA,KAEf,KACJ,wBAAQsC,QAASQ,UAAUC,UAAUC,UAAUhD,GAA/C,2BC/DN,IAYeiD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC9D,EAAD,MAEF+D,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bbd4b761.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport words from \"an-array-of-english-words\";\n\nexport default function App() {\n  const [wordList, setList] = useState();\n  const [quantity, setQuantity] = useState(25);\n  const max = words.length;\n\n  const getIndexes = () => {\n    const listOfIndexes = [];\n    for (let i = 0; i < quantity; i++) {\n      const randomIndex = Math.floor(Math.random() * max);\n      listOfIndexes.push(randomIndex);\n    }\n    return listOfIndexes;\n  };\n\n  const getWords = (isSorted = false) => {\n    const indexes = getIndexes();\n    let list = indexes.map((index) => words[index]);\n    if (isSorted) list = list.sort((a, b) => a.localeCompare(b));\n    setList(JSON.stringify(list));\n    return list;\n  };\n\n  return (\n    <div style={{ textAlign: \"center\", width: \"100vw\" }}>\n      <h1>Random English Words Array Generator</h1>\n      <label htmlFor=\"quantity\">Word Count </label>\n      <input\n        name=\"quantity\"\n        type=\"number\"\n        value={quantity}\n        onChange={(e) => setQuantity(e.target.value)}\n        min=\"1\"\n        max={max}\n      />\n      <button onClick={() => getWords()}>Generate</button>\n      <button onClick={() => getWords(true)}>Generate Sorted Array</button>\n      {quantity > max ? (\n        <p style={{ color: \"red\" }}>Max number of words is: {max}!</p>\n      ) : (\n        <p></p>\n      )}\n      {wordList ? (\n        <div\n          style={{\n            maxWidth: \"80vw\",\n            border: \"2px solid black\",\n            padding: \"15px\",\n            overflowWrap: \"break-word\",\n            margin: \"10px auto\",\n          }}\n        >\n          <button\n            style={{ display: \"block\" }}\n            onClick={navigator.clipboard.writeText(wordList)}\n          >\n            Copy Array\n          </button>\n          const array = {wordList}\n        </div>\n      ) : null}\n      <button onClick={navigator.clipboard.writeText(wordList)}>\n        Copy Array\n      </button>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}